# Expects files utils.py and locations.json and a folder templates which should contain land50.py, land110.py, and page.html
import argparse
import json
import typing as t
from os import path

from flask import Flask, render_template, request

app = Flask(__name__)

TEMPLATES_DIR = "templates"
LOCATIONS_FILE = "locations.json"

# Home page
@app.route("/")
def page():
    """For top level route ("/"), a page with the visualization."""
    points = getPoints()
    return render_template("page.html", points=points)


# Routes for the various resources
@app.route("/land50.json")
def land50():
    with open(path.join(TEMPLATES_DIR, "land50.json")) as f:
        return json.loads(f.read())


@app.route("/land110.json")
def land110():
    with open(path.join(TEMPLATES_DIR, "land110.json")) as f:
        return json.loads(f.read())


@app.route("/points.json")
def points():
    p = getPoints()
    return json.dumps(p)


def getPoints() -> t.List[t.Tuple[float, float]]:
    # Open up the json file with the inverted index
    with open(LOCATIONS_FILE) as json_file:
        records = json.load(json_file)["locations"]

    coordinates = []
    for record in records:
        display_locations = record["locations"]
        for location in display_locations:
            lat_long = (location["longitude"], location["latitude"])
            coordinates.append(lat_long)

    return coordinates


def argparser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--locations",
        help="""
        Locations JSON file generated by covid_locations.
        """,
    )
    parser.add_argument(
        "--templates",
        help="""
        Server template directory.
        """,
    )
    return parser


def main() -> None:
    """Entry point.
    """
    global LOCATIONS_FILE, TEMPLATES_DIR
    args = argparser().parse_args()
    LOCATIONS_FILE = args.locations
    TEMPLATES_DIR = args.templates
    app.run(debug=False)


# This starts the local web service that will be listening for requests on port 5000.
if __name__ == "__main__":
    main()
